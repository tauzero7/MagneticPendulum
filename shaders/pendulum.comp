#version 430

uniform int useSpherical;
uniform int numParticles;
uniform int numMagnets;

uniform float pendulumLength;
uniform float pendulumHeight;
uniform float gravity;
uniform float kappa;
uniform float gamma;
uniform float magFactor;

layout( std140, binding=0 ) buffer PosCurr { vec4 pos_curr[]; };
layout( std140, binding=1 ) buffer PosNext { vec4 pos_next[]; };
layout( std140, binding=2 ) buffer PosMagnets { vec4 pos_mag[]; };
layout( std140, binding=3 ) buffer ColMagnets { vec4 col_mag[]; };
layout( std140, binding=4 ) buffer RKStep { vec4 stepsize[]; };
layout( packed, binding=5 ) buffer TimeID { float elapsedTime[]; };

layout( local_size_x = 128, local_size_y = 1, local_size_z = 1 ) in;


#define DEF_MAX(x,y)  ((x)>(y)?(x):(y))
#define DEF_MIN(x,y)  ((x)<(y)?(x):(y))

#define  SAFETY 0.9
#define  PGROW  -0.2
#define  PSHRNK -0.25
#define  ERRCON 1.89e-4
#define  TINY   1.0e-30

float
  b21 = 0.2, b31 = 3.0/40.0, b32 = 9.0/40.0, b41 = 0.3, b42 = -0.9, b43 = 1.2,
  b51 = -11.0/54.0, b52 = 2.5, b53 = -70.0/27.0, b54 = 35.0/27.0,
  b61 = 1631.0/55296.0, b62 = 175.0/512.0, b63 = 575.0/13824.0,
  b64 = 44275.0/110592.0, b65 = 253.0/4096.0,
  c1 = 37.0/378.0, c3 = 250.0/621.0, c4=125.0/594.0, c6 =512.0/1771.0,
  dc5 = -277.0/14336.0;
  
float dc1 = c1-2825.0/27648.0, dc3 = c3-18575.0/48384.0, dc4 = c4-13525.0/55296.0,
    dc6 = c6-0.25;

// ---------------------------------------
//   
// ---------------------------------------
void calcRHS( in vec4 y, out vec4 rhs ) {
    float l   = pendulumLength;
    float z0  = pendulumHeight;
    float g   = gravity;    
    float mf  = magFactor;
    
    float alpha,numer,rx,ry,rz;    
    vec2 M = vec2(0);
    
    if (useSpherical==1) {
        float theta = y.x;
        float phi   = y.y;
        float Dth   = y.z;
        float Dph   = y.w;
        
        float sth = sin(theta);
        float cth = cos(theta);
        float sph = sin(phi);
        float cph = cos(phi);
        
        rhs.xy = y.zw;
        //rhs.zw = vec2( Dph*Dph*sth*cth - g/l*sth - gamma/l*Dth, -2.0*Dth*Dph*cth/sth - gamma/(l*sth)*Dph );  // FALSCH
        rhs.zw = vec2( Dph*Dph*sth*cth - g/l*sth - gamma/l*Dth, -2.0*Dth*Dph*cth/sth - gamma/l*Dph );
       
        for(int i=0; i<numMagnets; i++) {
            alpha = pos_mag[i].w*mf;
            rx = l*sth*cph - pos_mag[i].x;
            ry = l*sth*sph - pos_mag[i].y;
            rz = z0 - l*cth - pos_mag[i].z;
            numer = pow(sqrt(rx*rx + ry*ry + rz*rz),-2-kappa);
            
            M += kappa*alpha*numer*vec2( (rx*cth*cph + ry*cth*sph + rz*sth)/l, (-rx*sph + ry*cph)/(l*sth) );
        }
    }
    else {
        rhs.xy = y.zw;
        rhs.zw = -gamma*y.zw - g/l*y.xy;    
    
        for(int i=0; i<numMagnets; i++) {
            alpha = pos_mag[i].w*mf;
            rx = y.x - pos_mag[i].x;
            ry = y.y - pos_mag[i].y;
            rz = z0-l - pos_mag[i].z;
            numer = pow(sqrt(rx*rx + ry*ry + rz*rz),-2-kappa);
            
            M += kappa*alpha*numer*vec2(rx,ry);
        }
    }
    rhs.zw -= M;
}

// ---------------------------------------
//   Runge-Kutta Cash-Karp step
// ---------------------------------------
void rkck( in vec4 y, in vec4 dydx, float h, out vec4 yout, out vec4 yerr ) {
    int i;
    vec4 ak2,ak3,ak4,ak5,ak6,ytemp;
    
    ytemp = y + h*b21*dydx;
    
    calcRHS(ytemp,ak2);
    ytemp = y + h*(b31*dydx + b32*ak2);
    
    calcRHS(ytemp,ak3);
    ytemp = y + h*(b41*dydx + b42*ak2 + b43*ak3);
    
    calcRHS(ytemp,ak4);
    ytemp = y + h*(b51*dydx + b52*ak2 + b53*ak3 + b54*ak4);
    
    calcRHS(ytemp,ak5);
    ytemp = y + h*(b61*dydx + b62*ak2 + b63*ak3 + b64*ak4 + b65*ak5);
    
    calcRHS(ytemp,ak6);
    yout = y + h*(c1*dydx + c3*ak3 + c4*ak4 + c6*ak6);
    yerr = h*(dc1*dydx + dc3*ak3 + dc4*ak4 + dc5*ak5 + dc6*ak6);
}

// ---------------------------------------
//   
// ---------------------------------------
void rkqs( inout vec4 y, in vec4 dydx, inout float t, in float htry, in vec4 yscal, out float hnext ) {
    vec4 yerr;
    vec4 ytemp;
    float errmax, htemp;    
    
    float eps = 1e-6;
    
    float h = htry;
   // for(int n=0; n<15; n++) {
    for(;;) {
        rkck(y,dydx,h,ytemp,yerr);
        
        errmax = 0.0;
        for(int i=0; i<4; i++) {
            errmax = DEF_MAX( errmax, abs(yerr[i]/yscal[i]) );
        }
        errmax /= eps;
        if (errmax <= 1.0) {
            break;
        }
        
        htemp = SAFETY * h * pow(errmax, PSHRNK);
        h = (h>=0.0 ? DEF_MAX(htemp,0.1*h) : DEF_MIN(htemp,0.1*h));
        if (h<1e-12) {
            break;
        }
    }
    
    if (errmax > ERRCON) {
        hnext = SAFETY * h * pow(errmax,PGROW);
    } else {
        hnext = 5.0*h;
    }
    
    t += h;
    y = ytemp;
}

// ---------------------------------------
//   
// ---------------------------------------
void main() {
    uint gid = gl_GlobalInvocationID.x;
    if (gid<numParticles) {
        vec2 pos = pos_curr[gid].xy;
        vec2 dir = pos_curr[gid].zw;
        vec4 y = vec4(pos,dir);
                    
        vec4 yscal,dydx;    
        float hnext;
        
        float h = stepsize[gid].w;
        float t = elapsedTime[gid];
        float oldTime = t;
        
        calcRHS(y,dydx);
        yscal = abs(y) + abs(dydx*h) + TINY;
        rkqs(y,dydx,t,h,yscal,hnext);
        
        pos_next[gid] = y;
        elapsedTime[gid] = t;
        
        float dr;
        float dist = 1e6;
        int mdidx = -1;
        for(int i=0; i<numMagnets; i++) {
            if (useSpherical==1) {
                dr = length(vec3(pendulumLength*sin(y.x)*cos(y.y),pendulumLength*sin(y.x)*sin(y.y),pendulumHeight-pendulumLength*cos(y.x)) - pos_mag[i].xyz);   
            } else {            
                dr = length(vec3(y.xy,0.0) - pos_mag[i].xyz);
            }                        
            if (dr<0.025) {
                mdidx = i;
                dist = dr;
                elapsedTime[gid] = oldTime;
            }
        }
        
        if (mdidx>=0 && mdidx<numMagnets) {
            stepsize[gid].xyz = col_mag[mdidx].xyz;
        }
        stepsize[gid].w = hnext;
        //pos_next[gid] = pos_curr[gid];
    }
}
